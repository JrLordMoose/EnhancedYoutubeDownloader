WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:02.960
Sub-agents are an exciting&nbsp;
new feature in Cloud Code.&nbsp;

00:00:02.960 --> 00:00:05.040
Let's talk about what you&nbsp;
should do before starting&nbsp;&nbsp;

00:00:05.040 --> 00:00:07.840
to use them so you have the best possible setup.&nbsp;

00:00:07.840 --> 00:00:14.160
We will go over sub-agency CPU consumption,&nbsp;
what models to use, using thinking keywords&nbsp;&nbsp;

00:00:14.160 --> 00:00:19.440
for cloud like think deep, ultra think.
Why plan mode is helpful in this case,&nbsp;&nbsp;

00:00:19.440 --> 00:00:23.760
how to structure your prompts, and&nbsp;
where to go if you run into issues.&nbsp;

00:00:23.760 --> 00:00:25.440
Welcome back.
My name is Nataly,&nbsp;&nbsp;

00:00:25.440 --> 00:00:29.440
I'm a professional software engineer.
In my free time, I enjoy vibe coding.&nbsp;

00:00:29.440 --> 00:00:33.840
So, if you're interested in vibe coding, software&nbsp;
engineering and AI, consider subscribing.&nbsp;

00:00:33.840 --> 00:00:38.320
The first thing you should do is configure&nbsp;
your settings file for cloud code.&nbsp;

00:00:38.320 --> 00:00:43.360
A problem I quickly ran into is that the&nbsp;
sub agents were consuming all of my CPU&nbsp;&nbsp;

00:00:43.360 --> 00:00:46.400
and making my computer crash.
And the best place to look for&nbsp;&nbsp;

00:00:46.400 --> 00:00:51.760
solutions when something like that&nbsp;
happens is the Anthropic GitHub repo.&nbsp;

00:00:51.760 --> 00:00:55.760
It's confusingly called Anthropic,&nbsp;
but it's definitely run by them.&nbsp;

00:00:55.760 --> 00:01:02.960
So I found a thread called cloud code freezes&nbsp;
with 100% on CPU during multi-agent task.&nbsp;

00:01:02.960 --> 00:01:06.800
And this comment is the one that&nbsp;
really helped me, I will link it below.&nbsp;

00:01:06.800 --> 00:01:13.440
Basically, we want to limit the amount of memory&nbsp;
and resources that cloud code sub agents can use.&nbsp;

00:01:13.440 --> 00:01:21.120
Or I suppose that cloud code can use in general.
You don't want to set these as global variables.&nbsp;

00:01:21.120 --> 00:01:25.680
especially if you're running&nbsp;
on WSL2 on Windows or on Linux.&nbsp;

00:01:25.680 --> 00:01:31.520
What you actually want to do is create a&nbsp;
settings.json file in the .cloud folder.&nbsp;

00:01:31.520 --> 00:01:36.240
And then set them there.
I will link this doc below as well.&nbsp;

00:01:36.240 --> 00:01:42.080
And just so you can get an idea, here's&nbsp;
where I set mine settings.local.json.&nbsp;

00:01:42.080 --> 00:01:47.360
And it's right here at the top, this object.
Number two, if you're on the max plan or above,&nbsp;&nbsp;

00:01:47.360 --> 00:01:52.400
make sure to set your model to the Sonnet 4.
I noticed that this morning a new feature&nbsp;&nbsp;

00:01:52.400 --> 00:01:57.280
dropped where you're able to&nbsp;
configure the model per sub agent.&nbsp;

00:01:57.280 --> 00:02:02.160
Considering that Opus is five times more&nbsp;
expensive than Sonnet, I have found that&nbsp;&nbsp;

00:02:02.160 --> 00:02:07.280
it's more efficient to use Sonnet overall.
And if you need something with a larger&nbsp;&nbsp;

00:02:07.280 --> 00:02:14.080
context window to use Gemini CLI, a project&nbsp;
manager, or as a code-based analyzer.&nbsp;

00:02:14.080 --> 00:02:18.880
I'm not sure if this will stay relevant for&nbsp;
that much longer since we can now configure&nbsp;&nbsp;

00:02:18.880 --> 00:02:24.480
models per sub-agent, but if you're interested&nbsp;
in that, I have a video up here on how to use&nbsp;&nbsp;

00:02:24.480 --> 00:02:28.160
Gemini CLI with Claude code.
And here's what the agent&nbsp;&nbsp;

00:02:28.160 --> 00:02:32.240
interface looks like right now.
This just appeared this morning,&nbsp;&nbsp;

00:02:32.240 --> 00:02:38.320
which is just so cool, the models per agent.
And we can go and configure an agent, edit an&nbsp;&nbsp;

00:02:38.320 --> 00:02:44.320
agent, edit model, Sonnet, Opus,&nbsp;
Haiku, or inherit from parent.&nbsp;

00:02:44.320 --> 00:02:50.080
Number three, use thinking keywords like&nbsp;
think deep, ultra think, think deeper,&nbsp;

00:02:50.080 --> 00:02:53.600
because then you will see what&nbsp;
Claude is actually thinking.&nbsp;

00:02:53.600 --> 00:02:59.120
To me, it feels easy to get lost between all&nbsp;
the recommendations of different keywords&nbsp;&nbsp;

00:02:59.120 --> 00:03:03.120
because they don't seem defined.
They just seem recommended.&nbsp;

00:03:03.120 --> 00:03:09.280
In working on this full stack app, I found that&nbsp;
if you use think deep, you will actually see what&nbsp;&nbsp;

00:03:09.280 --> 00:03:12.800
Claude is suggesting and thinking.
Number four.&nbsp;

00:03:12.800 --> 00:03:19.840
I found that to get a great plan, first go&nbsp;
into plan mode, use the think deep keyword,&nbsp;&nbsp;

00:03:19.840 --> 00:03:26.160
and also tell Claude to utilize&nbsp;
subtasks and specialized agents.&nbsp;

00:03:26.160 --> 00:03:28.960
If you do that, it comes up&nbsp;
with a really great plan.&nbsp;

00:03:28.960 --> 00:03:35.680
The plan has phases and each phase has an agent.
This is really nice because even if you&nbsp;&nbsp;

00:03:35.680 --> 00:03:39.840
don't have any agent set up, it&nbsp;
will suggest agents to set up.&nbsp;

00:03:39.840 --> 00:03:44.480
And that gets us into step number five.
If you don't have any agent set up and&nbsp;&nbsp;

00:03:44.480 --> 00:03:49.520
Claude has suggested some agents, plan&nbsp;
mode is really great because you can&nbsp;&nbsp;

00:03:49.520 --> 00:03:57.280
stop what it's doing and then ask it to give&nbsp;
descriptions and tool lists for each agent.&nbsp;

00:03:57.280 --> 00:04:01.760
I have not yet found a programmatic way&nbsp;
to create agents in the correct format.&nbsp;

00:04:01.760 --> 00:04:05.600
So what I've been doing is just&nbsp;
creating one agent and then telling&nbsp;&nbsp;

00:04:05.600 --> 00:04:10.320
Claude to use that file as a template.
Here's what an agent template looks like.&nbsp;

00:04:10.320 --> 00:04:14.640
One of the more important things is&nbsp;
defining what tools the agent will use.&nbsp;

00:04:14.640 --> 00:04:18.240
Right now, selecting them is&nbsp;
quite finicky in the interface.&nbsp;

00:04:18.240 --> 00:04:23.120
The built-in tools are great, but the&nbsp;
doc on sub agents is great as well.&nbsp;

00:04:23.120 --> 00:04:27.920
What you could also do is copy over&nbsp;
this file format and tell Claude to&nbsp;&nbsp;

00:04:27.920 --> 00:04:33.440
create agents according to this file format.
And instead of using the slash agents command,&nbsp;&nbsp;

00:04:33.440 --> 00:04:37.920
you can tell Claude to create sub-agent&nbsp;
files just like outlined here in the&nbsp;&nbsp;

00:04:37.920 --> 00:04:42.160
direct file management section.
That gets us into the next point,&nbsp;&nbsp;

00:04:42.160 --> 00:04:48.640
what tools to use, what MCPs to use.
I'm working on a Next.js Superbase app and&nbsp;&nbsp;

00:04:48.640 --> 00:04:58.640
I found that the Superbase MCP, context 7, docs&nbsp;
MCP, playwright MCP have been incredibly useful.&nbsp;

00:04:58.640 --> 00:05:04.480
I would suggest setting up all of your MCPs and&nbsp;
then going through the agent creation flow to&nbsp;&nbsp;

00:05:04.480 --> 00:05:09.360
see what tools you have available.
Go into agents, create new agent,&nbsp;&nbsp;

00:05:09.360 --> 00:05:13.920
click through, write something.
Here it's a little confusing because they&nbsp;&nbsp;

00:05:13.920 --> 00:05:19.520
don't actually show you all the tools right away.
So just go to show advanced options and&nbsp;&nbsp;

00:05:19.520 --> 00:05:24.160
you will see all your tools.
They are sectioned off by MCP and&nbsp;&nbsp;

00:05:24.160 --> 00:05:35.200
notice that when you're adding the MCP tool&nbsp;
to the agent, it's MCP__MCP name__tool name.&nbsp;

00:05:35.200 --> 00:05:40.480
And lastly, let's talk about prompts.
If you're using subtasks and sub-agents&nbsp;&nbsp;

00:05:40.480 --> 00:05:46.160
in your prompts, make sure you're using XML tags.
They can be anything. You can name them anything.&nbsp;

00:05:46.160 --> 00:05:51.440
For example, here, I was working&nbsp;
on some CRUD bugs, and so I made a&nbsp;&nbsp;

00:05:51.440 --> 00:05:58.640
crud functionality map tag to put the crud&nbsp;
map file in there, user journey maps tag.&nbsp;

00:05:58.640 --> 00:06:04.400
And then it's really useful to have one&nbsp;
agent to give information to the other.&nbsp;

00:06:04.400 --> 00:06:10.880
So you want to put that into tags as well.
For example, tag next steps.&nbsp;

00:06:10.880 --> 00:06:16.160
The best way I found to format complex&nbsp;
prompts with subtasks and sub-agents&nbsp;&nbsp;

00:06:16.160 --> 00:06:22.480
is to use the Anthropic prompt generator.
I'll put a link in the description below,&nbsp;&nbsp;

00:06:22.480 --> 00:06:26.800
but basically you can paste in whatever&nbsp;
prompt you're working on and it will come&nbsp;&nbsp;

00:06:26.800 --> 00:06:33.760
up with a really well-formatted prompt that&nbsp;
will help you hand off tasks between agents.&nbsp;

00:06:33.760 --> 00:06:39.760
It usually also adds a paragraph at the beginning&nbsp;
and end, so for my CRUD debugging prompt,&nbsp;&nbsp;

00:06:39.760 --> 00:06:46.240
it was something like, you are an AI assistant&nbsp;
coordinating a team of specialized sub-agents.&nbsp;

00:06:46.240 --> 00:06:52.560
And then at the end it said, your final output&nbsp;
should consist of only the E2E testing report,&nbsp;&nbsp;

00:06:52.560 --> 00:06:58.320
do not include any intermediate steps, discussions&nbsp;
or thought processes in the final output.&nbsp;

00:06:58.320 --> 00:07:03.760
Which I didn't really like, so I started&nbsp;
using that think mode and removing that.&nbsp;

00:07:03.760 --> 00:07:07.680
Now let's talk about what to do when you're&nbsp;
actually working with the sub agents.&nbsp;

00:07:07.680 --> 00:07:11.440
Sometimes they can hang.
It's okay to interrupt them.&nbsp;

00:07:11.440 --> 00:07:17.200
You can actually tell Claude to continue.
I would also advise using Git.&nbsp;

00:07:17.200 --> 00:07:21.280
It's been really helpful for me&nbsp;
to check out a branch per task,&nbsp;&nbsp;

00:07:21.280 --> 00:07:26.720
make sure the commits on that branch are small.
I also like asking Claude to make a summary&nbsp;&nbsp;

00:07:26.720 --> 00:07:32.000
document right before it commits&nbsp;
so I can read over what happened.&nbsp;

00:07:32.000 --> 00:07:35.520
And in this way, I have a good record&nbsp;
of what's going on with sub-agents.&nbsp;

00:07:35.520 --> 00:07:39.760
At the end of the day, this is&nbsp;
just engineering best practices.&nbsp;

00:07:39.760 --> 00:07:43.680
I found that Claude suggests more&nbsp;
and more specialized sub agents,&nbsp;&nbsp;

00:07:43.680 --> 00:07:49.600
which is why I have so many in this repo.
So API endpoint tester, API front-end&nbsp;&nbsp;

00:07:49.600 --> 00:07:55.520
contract validator, which tracks the flow&nbsp;
of data from the front end to the API.&nbsp;

00:07:55.520 --> 00:08:01.360
I would say don't be afraid to make more agents&nbsp;
as long as they are small in scope and their&nbsp;&nbsp;

00:08:01.360 --> 00:08:05.680
tool set is as limited as possible.
And finally, let's talk about what&nbsp;&nbsp;

00:08:05.680 --> 00:08:09.920
to do after you've used the agents&nbsp;
if you're running into any issues.&nbsp;

00:08:09.920 --> 00:08:15.280
You can use Repo mix to create an&nbsp;
overview of your repo and get an agent&nbsp;&nbsp;

00:08:15.280 --> 00:08:20.000
to analyze it and break it into tasks.
If you're encountering specific bugs&nbsp;&nbsp;

00:08:20.000 --> 00:08:25.200
with Cloud code, go to the Anthropic&nbsp;
Cloud code repo to look for issues.&nbsp;

00:08:25.200 --> 00:08:30.720
And another great place is the Cloud AI subreddit.
I hope you found these tips helpful.&nbsp;

00:08:30.720 --> 00:08:34.080
If you have other tips, please&nbsp;
leave them in comments below.&nbsp;

00:08:34.080 --> 00:08:37.760
Are you using any specialized prompts?
Are you using docs?&nbsp;

00:08:37.760 --> 00:08:43.680
For ideas on how to use Cloud more&nbsp;
efficiently, check out the next video.

